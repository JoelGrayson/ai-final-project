from load_data import load_split_data, continuous2binary
from models.continuous import baseline_mean_classifier, linear_regression, bernoulli_naive_bayes, support_vector_regression, neural_network
from models.continuous.evaluate import evaluate as continuous_evaluate
from models.binary import baseline_majority_classifier, decision_trees, gaussian_naive_bayes, knn, logistic_regression, random_forest, support_vector_classifier
from models.binary.evaluate import evaluate as binary_evaluate


print('# 2010-2012 Evaluation')
data=load_split_data('2010-2012')

print('\n## Continuous')
print('\n### Mean Classifier (Baseline)')
y_pred=baseline_mean_classifier.classify(data)
continuous_evaluate(data['y_test'], y_pred)
print('\n### Linear Regression')
y_pred=linear_regression.classify(data)
continuous_evaluate(data['y_test'], y_pred)
print('\n### Support Vector Regression')
y_pred=support_vector_regression.classify(data, C=10)
continuous_evaluate(data['y_test'], y_pred)
# print('\n### Neural Network')
# y_pred=neural_network.classify(data, hidden_layer_sizes=(20, 20), max_iter=1000)
# continuous_evaluate(data['y_test'], y_pred)

print('\n\n## Binary')
data=continuous2binary(data)
print('\n### Majority Classifier (Baseline)')
y_pred=baseline_majority_classifier.classify(data)
binary_evaluate(data['y_test'], y_pred, include_precision_and_recall=False)
print('\n### Logistic Regression')
y_pred=logistic_regression.classify(data, C=1e-8)
binary_evaluate(data['y_test'], y_pred)
print('\n### Decision Trees')
y_pred=decision_trees.classify(data)
binary_evaluate(data['y_test'], y_pred)
print('\n### Random Forest')
y_pred=random_forest.classify(data)
binary_evaluate(data['y_test'], y_pred)
print('\n### KNN')
y_pred=knn.classify(data)
binary_evaluate(data['y_test'], y_pred)
print('\n### Naive-Bayes')
y_pred=gaussian_naive_bayes.classify(data)
binary_evaluate(data['y_test'], y_pred)
print('\n### Bernoulli Naive Bayes')
y_pred=bernoulli_naive_bayes.classify(data)
binary_evaluate(data['y_test'], y_pred)
print('\n### Support Vector Classifier')
y_pred=support_vector_classifier.classify(data, C=100)
binary_evaluate(data['y_test'], y_pred)


print('\n\n# 2020 Evaluation')
data=load_split_data('2020')

print('\n## Continuous')
print('\n### Mean Classifier (Baseline)')
y_pred=baseline_mean_classifier.classify(data)
continuous_evaluate(data['y_test'], y_pred)
print('\n### Linear Regression')
y_pred=linear_regression.classify(data)
continuous_evaluate(data['y_test'], y_pred)
print('\n### Support Vector Regression')
y_pred=support_vector_regression.classify(data, C=10)
continuous_evaluate(data['y_test'], y_pred)
# print('\n### Neural Network')
# y_pred=neural_network.classify(data, hidden_layer_sizes=(20, 10), max_iter=1000)
# continuous_evaluate(data['y_test'], y_pred)

print('\n\n## Binary')
data=continuous2binary(data)
print('\n### Majority Classifier (Baseline)')
y_pred=baseline_majority_classifier.classify(data)
binary_evaluate(data['y_test'], y_pred, include_precision_and_recall=False)
print('\n### Logistic Regression')
y_pred=logistic_regression.classify(data, C=1e-6)
binary_evaluate(data['y_test'], y_pred)
print('\n### Decision Trees')
y_pred=decision_trees.classify(data)
binary_evaluate(data['y_test'], y_pred)
print('\n### Random Forest')
y_pred=random_forest.classify(data)
binary_evaluate(data['y_test'], y_pred)
print('\n### KNN')
y_pred=knn.classify(data)
binary_evaluate(data['y_test'], y_pred)
print('\n### Naive-Bayes')
y_pred=gaussian_naive_bayes.classify(data)
binary_evaluate(data['y_test'], y_pred)
print('\n### Bernoulli Naive Bayes')
y_pred=bernoulli_naive_bayes.classify(data)
binary_evaluate(data['y_test'], y_pred)
print('\n### Support Vector Classifier')
y_pred=support_vector_classifier.classify(data, C=100)
binary_evaluate(data['y_test'], y_pred)

